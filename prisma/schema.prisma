generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model currency_types {
  id        Int         @id
  name      String?     @db.VarChar(10)
  symbol    String?     @db.VarChar(5)
  pizzas    pizzas[]
  resources resources[]
}

model pizza_requirements {
  id                String      @id @db.Char(26)
  pizza_id          String?     @db.Char(26)
  resource_id       String?     @db.Char(26)
  quantity_required Decimal?    @db.Decimal(10, 2)
  unit_id           Int?
  edited_at         DateTime?   @db.Timestamp(6)
  edited_by         String?     @db.Char(26)
  created_at        DateTime?   @db.Timestamp(6)
  created_by        String?     @db.Char(26)
  pizzas            pizzas?     @relation(fields: [pizza_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pizza_reqs_flavor")
  resources         resources?  @relation(fields: [resource_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pizza_reqs_ingredient")
  unit_types        unit_types? @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pizza_reqs_unit")
}

model pizzas {
  id                 String               @id @db.Char(26)
  flavor             String?              @unique @db.VarChar(70)
  current_price      Decimal?             @db.Decimal(10, 2)
  currency_id        Int?
  record_status_id   Int?
  sizes              Int[]
  created_at         DateTime?            @db.Timestamp(6)
  created_by         String?              @db.Char(26)
  edited_at          DateTime?            @db.Timestamp(6)
  edited_by          String?              @db.Char(26)
  pizza_requirements pizza_requirements[]
  currency_types     currency_types?      @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pizza_currency")
  record_status      record_status?       @relation(fields: [record_status_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "pizza_record_status")
}

model record_status {
  id     Int      @id
  name   String?  @db.VarChar(15)
  pizzas pizzas[]
}

model resources {
  id                    String               @id @db.Char(26)
  name                  String?              @unique @db.VarChar(70)
  quantity              Decimal?             @db.Decimal(10, 2)
  average_cost_per_unit Decimal?             @db.Decimal(10, 2)
  currency_id           Int?
  unit_id               Int?
  last_entry_at         DateTime?            @db.Timestamp(6)
  pizza_requirements    pizza_requirements[]
  currency_types        currency_types?      @relation(fields: [currency_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "resources_currency")
  unit_types            unit_types?          @relation(fields: [unit_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "resources_unit")
}

model sizes_coeficient {
  id         Int       @id
  value      Decimal?  @db.Decimal(10, 2)
  edtied_at  DateTime? @db.Timestamp(6)
  edited_by  String?   @db.Char(26)
  created_at DateTime? @db.Timestamp(6)
  created_by String?   @db.Char(26)
}

model unit_types {
  id                 Int                  @id
  name               String?              @db.VarChar(15)
  symbol             String?              @db.VarChar(3)
  pizza_requirements pizza_requirements[]
  resources          resources[]
}

model users {
  id         String    @id @db.Char(26)
  name       String    @db.VarChar(70)
  email      String    @unique @db.VarChar(75)
  created_at DateTime  @db.Timestamp(6)
  edited_at  DateTime? @db.Timestamp(6)
}
